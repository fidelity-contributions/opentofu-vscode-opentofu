---
name: Publish Extension release

permissions:
  contents: write # for uploading release artifacts

on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deploy a stable or prerelease extension'
        type: choice
        required: true
        default: stable
        options:
          - stable
          - prerelease
      langserver:
        description: 'The tofu-ls version to use. If not specified will use version in package.json'
        required: false
        type: string
  push:
    tags: ['v*']
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  validate-release-pr:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      has_release_label: ${{ steps.check_label.outputs.has_release_label }}
    steps:
      - name: Check if PR has release label
        id: check_label
        run: |
          if [[ ${{ contains(github.event.pull_request.labels.*.name, 'release') }} = "true" ]]; then
            echo "This workflow was triggered by the release PR merge"
            echo "has_release_label=true" >> $GITHUB_OUTPUT
          else
            echo "PR does not have 'release' label. This workflow should only run for release PRs."
            echo "has_release_label=false" >> $GITHUB_OUTPUT
          fi

  create-github-release:
    runs-on: ubuntu-latest
    needs: validate-release-pr
    if: github.event.pull_request.merged == true && needs.validate-release-pr.outputs.has_release_label == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.ref }}

      - name: Get version from package.json
        id: version
        run: |
          version=$(jq -r '.version' package.json)
          echo "version=v$version" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        run: |
          changes_file=".changes/${{ steps.version.outputs.version }}.md"
          if [[ -f "$changes_file" ]]; then
            # We need to remove mention of version and date, since those are duplicate
            notes=$(tail -n +3 "$changes_file")
            gh release create ${{ steps.version.outputs.version }} \
              --title "${{ steps.version.outputs.version }}" \
              --notes "$notes"
          else
            echo "No changes file found. Creating a draft release."
            gh release create ${{ steps.version.outputs.version }} \
              --draft \
              --title "${{ steps.version.outputs.version }}" \
              --generate-notes
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-version-file:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get tag version
        id: tag
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Get file version
        id: file
        run: echo "version=$(jq ".version" package.json)" >> $GITHUB_OUTPUT
      - name: Compare versions
        run: |
          if [ "${{ steps.tag.outputs.version }}" != "${{ steps.file.outputs.version }}" ]; then
            echo "Tag version (${{ steps.tag.outputs.version }}) does not match file version (${{ steps.file.outputs.version }})"
            exit 1
          fi
          echo "Version check passed: ${{ steps.tag.outputs.version }}"
  build:
    name: Package
    needs: [check-version-file, create-github-release, validate-release-pr]
    # Triggering this workflow, either if it was triggered by the tag push and went through validation, or release PR was merged
    if: always() && (needs.check-version-file.result == 'success' || (needs.create-github-release.result == 'success' && needs.validate-release-pr.outputs.has_release_label == 'true'))
    strategy:
      matrix:
        include:
          - vsce_target: web
            ls_target: web_noop
            npm_config_arch: x64
          - vsce_target: win32-x64
            ls_target: windows_x86_64
            npm_config_arch: x64
          - vsce_target: win32-arm64
            ls_target: windows_arm64
            npm_config_arch: arm
          - vsce_target: linux-x64
            ls_target: linux_x86_64
            npm_config_arch: x64
          - vsce_target: linux-arm64
            ls_target: linux_arm64
            npm_config_arch: arm64
          - vsce_target: darwin-x64
            ls_target: darwin_x86_64
            npm_config_arch: x64
          - vsce_target: darwin-arm64
            ls_target: darwin_arm64
            npm_config_arch: arm64
    runs-on: 'ubuntu-latest'
    steps:
      - name: Check out repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.ref }}

      - name: Setup Node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: '.nvmrc'
          cache: npm

      - name: Install dependencies
        run: npm ci
        env:
          npm_config_arch: ${{ matrix.npm_config_arch }}
          ls_target: ${{ matrix.ls_target }}

      - name: Package PreRelease VSIX
        if: inputs.deploy_type == 'prerelease'
        run: npm run package -- --githubBranch $GITHUB_REF_NAME --pre-release --target=${{ matrix.vsce_target }}

      - name: Package Stable VSIX
        # If the workflow trigger was manual, by tag push or by PR merge
        # Currently release PR merge indicates stable release
        if: (inputs.deploy_type == 'stable' || startsWith(github.ref, 'refs/tags/v') || github.event.pull_request.merged == true)
        run: npm run package -- --target=${{ matrix.vsce_target }}

      - name: Upload vsix as artifact
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: ${{ matrix.vsce_target }}
          path: '*.vsix'

  publish-pre-marketplace:
    name: Publish Prerelease to Marketplace
    runs-on: ubuntu-latest
    needs: build
    if: success() && inputs.deploy_type == 'prerelease'
    steps:
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      - name: Publish Prerelease to Marketplace
        run: npx vsce publish --pre-release --no-git-tag-version --packagePath $(find . -iname *.vsix)
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

  publish-stable-marketplace:
    name: Publish Marketplace
    runs-on: ubuntu-latest
    needs: build
    if: success() && (inputs.deploy_type == 'stable' || startsWith(github.ref, 'refs/tags/v') || github.event.pull_request.merged == true)
    steps:
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      - name: Publish Stable to Marketplace
        run: npx vsce publish --no-git-tag-version --packagePath $(find . -iname *.vsix)
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}

  publish-stable-openvsx:
    name: Publish OpenVSX
    runs-on: ubuntu-latest
    needs: build
    if: success() && (inputs.deploy_type == 'stable' || startsWith(github.ref, 'refs/tags/v') || github.event.pull_request.merged == true)
    steps:
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      - name: Publish Stable to OpenVSX
        run: npx ovsx publish --packagePath $(find . -iname *.vsix)
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}
